#pragma once
class Counter {
public:
	virtual void inc() = 0;
	virtual void dec() = 0;
	virtual operator int() = 0;
	virtual ~Counter() {};
};

//Definition of LimitedCounter class
#pragma once
#include "Couter.h"
class LimitedCounter : public Counter {
public:
	LimitedCounter(int initial0, int limit0):initial(initial0), limit(limit0){}
	void inc();
	void dec();
	operator int();
	virtual ~LimitedCounter() {};
private:
	int initial;
	int limit;
};

//Definition of LimitedCounter functions
# include "LimitedCouter.h"

void LimitedCounter::inc() {
	if (initial < limit) {
		initial++;
	}
}

void LimitedCounter::dec() {
	if (initial > 0) {
		initial--;
	}
}

LimitedCounter::operator int() {
	return initial;
}


//Definition of OverflowCounter class
#pragma once
#include Counter
class OverflowCounter : public Counter {
public:
	OverflowCounter(int initial0, int limit0) :initial(initial0), limit(limit0) {}
	void inc();
	void dec();
	operator int();
	virtual ~OverflowCounter() {};
private:
	int initial;
	int limit;
};

//Definition of OverflowCounter funtions
#include "OverflowCounter.h"
void OverflowCounter::inc() {
	if (initial == limit) {
		initial = 0;
	}
	else {
		initial++;
	}
}

void OverflowCounter::dec() {
	if (initial == 0) {
		initial = limit;
	}
	else {
		initial--;
	}
}

OverflowCounter::operator int(){
	return initial;
}
