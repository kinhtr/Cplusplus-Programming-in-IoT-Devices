// ostream& operator<<(ostream& out, const Time& t) is a friend function to output time in format xx:yy
// istream& operator>>(istream& in, Time& t) is a friend function to read time in format xx:yy
#include "Time.h"
#include <iostream>
#include <string>
#include <cstdio>
#include <iomanip>
#include <fstream>
#include <sstream>
#pragma warning(disable : 4996)

#define H_MAX 24
#define M_MAX 60
using namespace std; 

// constructor
Time::Time(int hour0, int min0) {
	hour = hour0; 
	min = min0;
}
// Member funcions implementation
void Time::read(const char* str) {
	bool invalid = true;
	string buffer;
	while (invalid) {
		cout << str;
		getline(cin, buffer);
		if (sscanf(buffer.c_str(), "%d:%d", &hour, &min) == 2 
			&& hour < H_MAX && min < M_MAX && hour >= 0 && min >= 0) {
			invalid = false;
		}
		else {
			cout << "Wrong format! Try again!" << endl;
		}
	}
}

ostream& operator<<(ostream& out, const Time& t) {
	out << setiosflags(ios::right); out << setfill('0') << setw(2) << t.hour;
	out << ":" << setfill('0') << setw(2) << t.min << endl;
	return out;
}

istream& operator>>(istream& in, Time& t) { 
	string buffer;
	in >> buffer;
	if (sscanf(buffer.c_str(), "%d:%d", &t.hour, &t.min) != 2
		|| t.hour >= H_MAX || t.min >= M_MAX || t.hour < 0 || t.min < 0) {
		in.setstate(ios::failbit);
	}
	return in;
}

Time Time::operator-(Time t2) {
	Time duration;
	duration.hour = hour - t2.hour;
	duration.min = min - t2.min;
	if (duration.min < 0) {
		duration.min += M_MAX;
		duration.hour -= 1;
	}
	if (duration.hour < 0) {
		duration.hour += H_MAX;
	}
	return duration;
}

Time Time::operator+(Time t2) {
	Time sum;
	int overflow = 0;
	sum.min = min + t2.min;
	if (sum.min >= M_MAX) {
		sum.min -= M_MAX;
		overflow++;
	}
	sum.hour = hour + t2.hour + overflow;
	if (sum.hour >= H_MAX) {
		sum.hour -= H_MAX;
	}
	return sum;
}

Time Time::operator++() {
	min++;
	if (min >= M_MAX) {
		min -= M_MAX;
		hour += 1;
	}
	return *this;
}

Time Time::operator++(int) {
	Time old = *this;
	min++;
	if (min >= M_MAX) {
		min -= M_MAX;
		hour += 1;
	}
	return old;
}

bool Time::operator<(const Time& t2) {
	if (hour < t2.hour) {
		return true;
	}
	else if (hour == t2.hour && min < t2.min) {
		return true;
	}
	else {
		return false;
	}
}

bool Time::operator>(const Time& t2) {
	if (hour > t2.hour) {
		return true;
	}
	else if (hour == t2.hour && min > t2.min) {
		return true;
	}
	else {
		return false;
	}
} 

bool Time::operator==(const Time& t2) {
	if (hour == t2.hour && min == t2.min) {
		return true;
	}
	else {
		return false;
	}
}
